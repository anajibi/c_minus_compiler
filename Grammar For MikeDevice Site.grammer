Program⟶Declarationlist #init_program $
Declarationlist⟶Declaration Declarationlist
Declarationlist⟶
Declaration⟶Declarationinitial Declarationprime
Declarationinitial⟶Typespecifier ID
Declarationprime⟶Fundeclarationprime
Declarationprime⟶ #pid Vardeclarationprime
Vardeclarationprime⟶; #stvar
Vardeclarationprime⟶[ NUM #ptoken ] #starr;
Fundeclarationprime⟶#start_func( Params ) #stfunc Compoundstmt #end_func
Typespecifier⟶int #ptoken
Typespecifier⟶void #ptoken
Params⟶int ID #pid Paramprime Paramlist
Params⟶void
Paramlist⟶, Param Paramlist
Paramlist⟶
Param⟶Declarationinitial Paramprime
Paramprime⟶[ ] #st_param_arr
Paramprime⟶ #st_param_var
Compoundstmt⟶{  Declarationlist Statementlist }
Statementlist⟶Statement Statementlist
Statementlist⟶
Statement⟶Expressionstmt
Statement⟶Compoundstmt
Statement⟶Selectionstmt
Statement⟶Iterationstmt
Statement⟶Returnstmt
Expressionstmt⟶Expression ; #pop_exp
Expressionstmt⟶break ; #break
Expressionstmt⟶;
Selectionstmt⟶if ( Expression #save) Statement #jpf_save Elsestmt #jp
Elsestmt⟶endif
Elsestmt⟶else Statement endif
Iterationstmt⟶repeat #save_i Statement until ( Expression ) #jpf_save_i
Returnstmt⟶return Returnstmtprime
Returnstmtprime⟶; #return_from_func
Returnstmtprime⟶Expression ; #return_result
Expression⟶Simpleexpressionzegond
Expression⟶ID #determine_id B
B⟶= Expression #assign
B⟶[ Expression ] #determine_arr H
B⟶Simpleexpressionprime
H⟶= Expression #assign
H⟶G D C
Simpleexpressionzegond⟶Additiveexpressionzegond C
Simpleexpressionprime⟶Additiveexpressionprime C
C⟶Relop Additiveexpression #compare
C⟶
Relop⟶< #ptoken
Relop⟶== #ptoken
Additiveexpression⟶Term D
Additiveexpressionprime⟶Termprime D
Additiveexpressionzegond⟶Termzegond D
D⟶Addop Term #addop D
D⟶
Addop⟶+ #ptoken
Addop⟶- #ptoken
Term⟶Factor G
Termprime⟶Factorprime G
Termzegond⟶Factorzegond G
G⟶* Factor #mult G
G⟶
Factor⟶( Expression )
Factor⟶ID #determine_id Varcallprime
Factor⟶NUM #pnum
Varcallprime⟶( #start_args Args ) #call_func
Varcallprime⟶Varprime
Varprime⟶[ Expression ] #determine_arr
Varprime⟶
Factorprime⟶(#start_args Args ) #call_func
Factorprime⟶
Factorzegond⟶( Expression )
Factorzegond⟶NUM #pnum
Args⟶ Arglist
Args⟶
Arglist⟶Expression Arglistprime
Arglistprime⟶, Expression Arglistprime
Arglistprime⟶